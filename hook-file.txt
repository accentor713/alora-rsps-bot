::classInstanceTracker:IA:Entity
::classInstanceTracker:SG:NPC
::classInstanceTracker:RG:Player

::setSuper:Player:Entity
::setSuper:NPC:Entity

::addInterface:RG:Player
::addMethod:RG
public String getName() {
	return this.Z(0);
}

::new:interface:Player
public String getName();

::addInterface:IA:Entity
::addMethod:IA
public int getX() {
	return this.x;
}

::addMethod:IA
public int getY() {
	return this.x;
}

::new:interface:Entity
public int getX();
public int getY();



::addInterface:SG:NPC
::addMethod:SG
public String getName() {
	if (this.dI != null) {
		return this.dI.N;
	}
	return "<NO-NPC-DEFINITION>";
}

::addMethod:SG
public String[] getOptions() {
	if (this.dI != null) {
		return this.dI.J;
	}
	return new String[5];
}

::addMethod:SG
public int getCombatLevel() {
	return this.S;
}

::addMethod:SG
public int getId() {
	if (this.dI != null) {
		return this.dI.Y;
	}
	return -1;
}

::addMethod:SG
public void printFields() {
	java.lang.reflect.Field[] fields = IA.class.getDeclaredFields();
	for (int i = 0; i < fields.length; i++) {
		java.lang.reflect.Field field = fields[i];
		if (!java.lang.reflect.Modifier.isStatic(field.getModifiers())) {
			try {
				field.setAccessible(true);
				System.out.println(field.getName() + ": " + field.get(this));
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassCastException e) {
			
			}
		}
	}
}

::addMethod:SG
public int getIndex() {
	for (int i = 0; i < YB.H.length; i++) {
		if (YB.H[i] == this) {
			return i;
		}
	}
	return -1;
}

::addMethod:SG
public void doAction(String action) {
	int i = 0;
	int j = 0;
	int k = 4;
	long l = this.getIndex();
	String str1 = "";//"<col=ffff00>Man<col=00ff00> (level-2)";
	String str2 = action;
	MG.I(i, j, k, l, str1, str2, 297, 244);
}


::new:interface:NPC
public String getName();
public String[] getOptions();
public int getCombatLevel();
public int getId();
public void printFields();
public int getIndex();
public void doAction(String action);

::new:class:Bot

::addMethod:Bot
public static Player getLocalPlayer() {
	return (Player)NS.j;
}

::addMethod:Bot
public static java.util.List getPlayers() {
	return RG.instances;
}

::addMethod:Bot
public static java.util.List getNPCs() {
	return SG.instances;
}

::addMethod:Bot
public static void log(String s) {
	MG.I(null, s, 0);
}

::addMethod:Bot
public static void walkTo(int x, int y) {
	QF.I(NS.j.x, 0, 1, false, 0, NS.j.y, 1, 0, 2, x, y);
}

::addMethod:Bot
public static NPC getNearestNPC(int[] ids) {
	NPC nearest = null;
	float nearestDistance = Float.MAX_VALUE;
	Player localPlayer = Bot.getLocalPlayer();
	java.util.List npcs = Bot.getNPCs();
	for (int i = 0; i < npcs.size(); i++) {
		NPC npc = (NPC)npcs.get(i);
		for (int j = 0; j < ids.length; j++) {
			int id = ids[j];
			if (npc.getId() == id) {
				int dx = npc.getX() - localPlayer.getX();
				int dy = npc.getY() - localPlayer.getY();
				float distance = (float)Math.sqrt((double)(dx*dx + dy*dy));
				if (distance < nearestDistance) {
					nearest = npc;
					nearestDistance = distance;
				}
			}
		}
	}
	return nearest;
}

::addField:Bot
public static java.util.List globalHookMethods = new java.util.ArrayList();

::addField:Bot
private static Thread botThread = null;

::addMethod:Bot
public static void startBot(Runnable bot) {
	Bot.stopBot();
	Bot.botThread = new Thread(bot);
	Bot.botThread.start();
}

::addMethod:Bot
public static void stopBot() {
	if (Bot.botThread != null) {
		Bot.botThread.interrupt();
	}
}

::new:class:TestBot
::addInterface:TestBot:java.lang.Runnable
::addMethod:TestBot
public void run() {
	while (true) {
		int[] bankerIds = new int[]{395, 400};
		NPC banker = Bot.getNearestNPC(bankerIds);
		if (banker != null) {
			banker.doAction("Bank");
		}
		Thread.sleep(5000L);
	}
}

::insert:MJ:I(java.lang.String):292
if ($1.equals("::npc_ids")) {
	java.util.List npcs = Bot.getNPCs();
	for (int i = 0; i < npcs.size(); i++) {
		NPC npc = (NPC)npcs.get(i);
		Bot.log(npc.getName() + ": " + npc.getId());
	}
}

if ($1.equals("::start_bot")) {
	Bot.startBot((Runnable)new TestBot());
	/*int[] bankerIds = new int[]{395, 400};
	NPC banker = Bot.getNearestNPC(bankerIds);
	if (banker != null) {
		banker.doAction("Bank");
	}*/
}
if ($1.equals("::stop_bot")) {
	Bot.stopBot();
}
if ($1.startsWith("::w")) {
	String[] split = $1.split(" ");
	int x = Integer.parseInt(split[1]);
	int y = Integer.parseInt(split[2]);
	Bot.walkTo(x, y);
}
if ($1.startsWith("::p")) {
	int i = 0;
	int j = 0;
	int k = 4;
	long l = 6833;
	String str1 = "<col=ffff00>Man<col=00ff00> (level-2)";
	String str2 = "Pickpocket";
	MG.I(i, j, k, l, str1, str2, 297, 244);
}



